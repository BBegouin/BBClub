# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-09-16 08:29
from __future__ import unicode_literals

from django.db import migrations
from league_manager.models.ref_skills import Ref_Skills
from league_manager.models.ref_roster import Ref_Roster
from league_manager.models.ref_roster_line import Ref_Roster_Line
from django.conf import settings

import csv

data_dir = getattr(settings, "PROJECT_ROOT", None)+'/datas'

def init_ref_skills(apps, schema_editor):

    with open(data_dir+'/skills.csv', newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=';', quotechar='|')
        for row in spamreader:
            new_skill = Ref_Skills(
                name = row[1].strip(),
                family=row[2].strip(),
                desc = ""
            )
            new_skill.save();
            print(row[1] + " inserted !")

def init_ref_rosters(apps, schema_editor):

    with open(data_dir+'/rosters.csv', newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=';', quotechar='|')
        for row in spamreader:
            new_roster = Ref_Roster(
                name = row[0].strip(),
                reroll_price=row[1].strip(),
                apo_available=row[2]
            )
            new_roster.save();
            print(row[0] + " inserted !")

#
#
#
def init_rosters_lines(apps, schema_editor):

    with open(data_dir+'/rosters_lines.csv', newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=';', quotechar='|')
        for row in spamreader:

            print(row)

            linked_roster = Ref_Roster.objects.get(name = row[0])

            new_line = Ref_Roster_Line (
                roster = linked_roster,
                max = row[1],
                position = row[2],
                cost = row[3],
                M = row[4],
                F = row[5],
                Ag = row[6],
                Ar = row[7],
                normal_skills = row[9],
                double_skills = row[10],
            )

            new_line.save()

            print(linked_roster)
            if row[8] == '':
                continue

            skill_list = row[8].split(",")

            for skill in skill_list:
                skill = skill.strip(" ")
                print(skill)
                linked_skill = Ref_Skills.objects.get(name = skill)
                new_line.base_skills.add(linked_skill);

            print (new_line.roster.name + " " + new_line.position + " Inserted !")


    # vérifier que tous les rosters du fichiers, sont bien dans la table roster ref
    # vérifier que toutes les compétences du fichier sont bien dans la table ref_skill


def init_rosters_journeymens(apps, schema_editor):

    with open(data_dir+'/rosters.csv', newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=';', quotechar='|')
        for row in spamreader:
            roster = Ref_Roster.objects.get(name=row[0])
            roster.journeyman = Ref_Roster_Line.objects.get(pk=row[3])
            roster.save();


class Migration(migrations.Migration):

    dependencies = [
        ('league_manager', '0002_auto_20160916_0802'),
    ]

    operations = [
        migrations.RunPython(init_ref_skills),
        migrations.RunPython(init_ref_rosters),
        migrations.RunPython(init_rosters_lines),
        migrations.RunPython(init_rosters_journeymens),
    ]
